name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.increment-git-tag.outputs.git-tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build And Run Unit Tests
        run: mvn -B package --file pom.xml

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          chmod +x ./build/git_update.sh
          bash ./build/git_update.sh -v patch

      - name: Build Docker Image
        env:
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          docker build -t tinyurl-app:latest -t tinyurl-app:${IMAGE_TAG} .
          docker images

      - name: Start Docker Compose Services
        env:
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          echo "Starting services with tag: $IMAGE_TAG"
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost/swagger-ui.html)" != "200" ]]; do sleep 5; done' || false

      - name: Run E2E Test
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/swagger-ui.html)
          if [ "$response" != "200" ]; then
            echo "E2E test failed with status code: $response"
            exit 1
          fi
          echo "E2E test passed successfully"

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Tag and Push to GCR
        env:
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          echo "Tagging and pushing image with tag: $IMAGE_TAG"
          IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/tinyurl:${IMAGE_TAG}"
          docker tag tinyurl-app:${IMAGE_TAG} $IMAGE_NAME
          docker push $IMAGE_NAME
          echo "Pushed image: $IMAGE_NAME"

      - name: Cleanup
        if: always()
        run: docker compose down -v

  deploy-to-gke:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_CLUSTER_ZONE }}

      - name: Update Deployment Image
        env:
          IMAGE_TAG: ${{ needs.build-and-deploy.outputs.image_tag }}
        run: |
          # Update the deployment image
          kubectl set image deployment/tinyurl-app \
            tinyurl-app=gcr.io/${{ secrets.GCP_PROJECT_ID }}/tinyurl:${IMAGE_TAG}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/tinyurl-app

      - name: Verify Deployment
        run: |
          # Get deployment status
          kubectl get deployment tinyurl-app -o wide
          
          # Get pods status
          kubectl get pods -l app=tinyurl-app